/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puzzleia;
import Algoritmo.Tablero;
import Algoritmo.Algoritmo;
import Algoritmo.DeEscaladaMaximaPendiente;
import Algoritmo.AlgoritmoA;
import Algoritmo.EnfriamientoSimulado;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import Algoritmo.GeneracionYPrueba;
import java.util.LinkedList;


/**
 *
 * @author erick
 */
public class Interfaz extends javax.swing.JFrame{

    public int contadorNuevos=1;
    public Hashtable<String,String> archivos  = new Hashtable<>();
    public Hashtable<String,String> direcciones  = new Hashtable<>();        
    public String raizActual = getPathActual();   
    public String salida = "";
    public String fechaHora = "";
    String pathProyectos = "C:\\Users\\erick\\Desktop\\Java";     
    boolean seguirHilo=false;
    boolean hiloIniciado=false;
    public Thread hilo;
    int cont=0;
    public Hashtable<String, JTextArea> tablaEditores = new Hashtable<>();    
    public int anterior = 0;
    public int velocidadActual = 0;    
    /*
    0 = ejecución normal.
    1 = ejecución automatica
    2 = ejecución con breakpoints    
    */
    
    
    /**
     * Creates new form interfaz
     */
    public Interfaz() 
    {
        initComponents(); 
        arbolDirectorio.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
//        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
//        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
//        root.removeAllChildren();
//        model.reload(root); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEditor = new javax.swing.JPanel();
        panelDirectorio = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbolDirectorio = new javax.swing.JTree();
        panelEdicion = new javax.swing.JPanel();
        contenedorPaneles = new javax.swing.JTabbedPane();
        botonEjecutar = new javax.swing.JButton();
        lblposicion = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        algoritmoSeleccionado = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        costoMaximo = new javax.swing.JSpinner();
        Presición = new javax.swing.JSpinner();
        mejorRuta = new javax.swing.JCheckBox();
        estadosRepetidos = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelReporte = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        labelReporte = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaErrores = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        reporteCompilacion = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaConsola = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabladeSimbolos = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        abrirCarpeta = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        guardarComo = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        menuEjecucion = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        panelEditor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        panelDirectorio.setBackground(new java.awt.Color(153, 255, 51));
        panelDirectorio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        arbolDirectorio.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arbolDirectorioValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(arbolDirectorio);

        javax.swing.GroupLayout panelDirectorioLayout = new javax.swing.GroupLayout(panelDirectorio);
        panelDirectorio.setLayout(panelDirectorioLayout);
        panelDirectorioLayout.setHorizontalGroup(
            panelDirectorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDirectorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelDirectorioLayout.setVerticalGroup(
            panelDirectorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDirectorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEdicion.setBackground(new java.awt.Color(204, 204, 255));

        botonEjecutar.setText("Buscar solución");
        botonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEjecutarActionPerformed(evt);
            }
        });

        jLabel1.setText("Algoritmo");

        algoritmoSeleccionado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Generación y prueba", "Métodos de escalada - Máxima Pendiente", "Enfriamiento Simulado", "Algoritmo A*" }));

        jLabel2.setText("Coste máximo");

        jLabel3.setText("Presición");

        costoMaximo.setModel(new javax.swing.SpinnerNumberModel(1000, 0, null, 1));

        Presición.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));

        mejorRuta.setSelected(true);
        mejorRuta.setText("Mostrar Mejor Ruta");

        estadosRepetidos.setSelected(true);
        estadosRepetidos.setText("Verificar Estados Repetidos");

        javax.swing.GroupLayout panelEdicionLayout = new javax.swing.GroupLayout(panelEdicion);
        panelEdicion.setLayout(panelEdicionLayout);
        panelEdicionLayout.setHorizontalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorPaneles)
            .addGroup(panelEdicionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(algoritmoSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonEjecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(costoMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Presición, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addComponent(mejorRuta)
                        .addGap(150, 150, 150)
                        .addComponent(lblposicion, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(estadosRepetidos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelEdicionLayout.setVerticalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEdicionLayout.createSequentialGroup()
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEdicionLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblposicion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(costoMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mejorRuta))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(algoritmoSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Presición, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(estadosRepetidos)))
                .addGap(20, 20, 20)
                .addComponent(contenedorPaneles, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(204, 255, 102));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        panelReporte.setLayout(new javax.swing.BoxLayout(panelReporte, javax.swing.BoxLayout.LINE_AXIS));

        labelReporte.setText("jLabel2");
        labelReporte.setMaximumSize(new java.awt.Dimension(1000, 1000));
        labelReporte.setMinimumSize(new java.awt.Dimension(1000, 1000));
        labelReporte.setPreferredSize(new java.awt.Dimension(1000, 1000));
        jScrollPane6.setViewportView(labelReporte);

        panelReporte.add(jScrollPane6);

        jTabbedPane1.addTab("Reportes", panelReporte);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        tablaErrores.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        tablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Descripción", "Linea", "Columna", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaErrores);

        jPanel3.add(jScrollPane2);

        reporteCompilacion.setBackground(new java.awt.Color(0, 0, 0));
        reporteCompilacion.setColumns(20);
        reporteCompilacion.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        reporteCompilacion.setForeground(new java.awt.Color(255, 255, 255));
        reporteCompilacion.setRows(5);
        jScrollPane5.setViewportView(reporteCompilacion);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1461, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel6);

        jTabbedPane1.addTab("Errores", jPanel3);

        textAreaConsola.setBackground(new java.awt.Color(0, 0, 0));
        textAreaConsola.setColumns(20);
        textAreaConsola.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        textAreaConsola.setForeground(new java.awt.Color(255, 255, 255));
        textAreaConsola.setRows(5);
        jScrollPane4.setViewportView(textAreaConsola);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1461, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Consola", jPanel4);

        tabladeSimbolos.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        tabladeSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabladeSimbolos);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1473, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tabla de Símbolos", jPanel5);

        jPanel1.add(jTabbedPane1);

        javax.swing.GroupLayout panelEditorLayout = new javax.swing.GroupLayout(panelEditor);
        panelEditor.setLayout(panelEditorLayout);
        panelEditorLayout.setHorizontalGroup(
            panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorLayout.createSequentialGroup()
                .addComponent(panelDirectorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        panelEditorLayout.setVerticalGroup(
            panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorLayout.createSequentialGroup()
                .addGroup(panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDirectorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panelEditor);

        menuArchivo.setText("Archivo");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Abrir");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem9);

        abrirCarpeta.setText("Abrir Carpeta");
        abrirCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirCarpetaActionPerformed(evt);
            }
        });
        menuArchivo.add(abrirCarpeta);

        jMenuItem1.setText("Nuevo Archivo (nueva Tab)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem1);

        jMenuItem2.setText("Nueva Carpeta");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem2);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        guardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarComo.setText("Guardar como");
        guardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(guardarComo);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Cerrar (tab Actual)");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem4);

        jMenuItem5.setText("Salir");
        menuArchivo.add(jMenuItem5);

        jMenuBar1.add(menuArchivo);

        menuEjecucion.setText("Depurar");

        jMenuItem6.setText("Iniciar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        menuEjecucion.add(jMenuItem6);

        jMenuItem7.setText("Siguiente Paso");
        menuEjecucion.add(jMenuItem7);

        jMenuItem8.setText("Terminar Todo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menuEjecucion.add(jMenuItem8);

        jMenuBar1.add(menuEjecucion);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        nuevoArchivo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        nuevaCarpeta();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void arbolDirectorioValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_arbolDirectorioValueChanged
        try 
        {
            abrirDesdeArbol();
        } 
        catch (Exception e) 
        {
        }
    }//GEN-LAST:event_arbolDirectorioValueChanged

    private void guardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoActionPerformed
        try {
            guardarArchivoNuevo();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarComoActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            cerrarActual();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try 
        {
            abrirArchivo();
        } 
        catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void botonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEjecutarActionPerformed
        buscarSolucion();
    }//GEN-LAST:event_botonEjecutarActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        abrirAST();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

       
        
        
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void abrirCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirCarpetaActionPerformed
        try {
            abrirCarpeta();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirCarpetaActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        try {
            save();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    

    public void abrirArchivo() throws FileNotFoundException
    {

        String path = "";
        String nombreArchivo ="";
        JFileChooser file=new JFileChooser(pathProyectos);        
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
            StringTokenizer token = new StringTokenizer(path,"\\");
            String nombre = "";
            while(token.hasMoreTokens())
            {
                nombre = token.nextToken();
            }
            nombreArchivo = nombre;  
            direcciones.put(nombreArchivo,path);  //  Guardamos <nombre, dirccion>
        }  
        if(eleccion==null){return;}
        
        
        File archivo= new File(path); 
        Scanner sc = new Scanner(archivo); 
        String data = "";
        while (sc.hasNextLine())
        {
            if(data.equals(""))
            {
                data = sc.nextLine();
            }
            else
            {
                data = data + "\n" + sc.nextLine();
            }
        }        
        nuevoArchivoConData(nombreArchivo, data);                
    }
    
    public void actualizarSalida()
    {
        textAreaConsola.setText(salida);
    }
    
    
    public void abrirCarpeta() throws FileNotFoundException
    {

        String path = "";
        String nombreCarpeta ="";
        JFileChooser file=new JFileChooser(PathActual()+"\\Proyectos");      
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
        }  
        if(eleccion==null){return;}
        
        File aDirectory = new File(path);        
        String[] filesInDir = aDirectory.list();
        for (String filesInDir1 : filesInDir) 
        {
            if (filesInDir1.contains(".txt")) 
            {
                direcciones.put(filesInDir1, path+"\\" + filesInDir1);
            }            
            /*
            if(filesInDir[i].contains(".d++")||filesInDir[i].contains(".djs")||filesInDir[i].contains(".dasm"))
            {
            }*/
        }
        
        
        
        System.out.println(direcciones.toString());
        //nuevoArchivoConData(nombreCarpeta, data);                
    }    
    
    public void abrirDesdeArbol()
    {
            TreePath[] paths = arbolDirectorio.getSelectionPaths();
            String nombre = "";
            int ubicacion = 666;
            for (TreePath path : paths) 
            {                
                nombre = path.getLastPathComponent().toString();
            }
            
            for(int posicion = 0; posicion<contenedorPaneles.getTabCount();posicion++)
            {
                if(nombre.equals(contenedorPaneles.getTitleAt(posicion)))
                {
                    ubicacion = posicion;
                    break;
                }
            }
            if(ubicacion!=666)
            {                
                contenedorPaneles.setSelectedIndex(ubicacion);                
            }
            String tipo = archivos.get(nombre);
            if(tipo.equals("carpeta"))
            {
                raizActual= nombre;
            }
            else
            {
                raizActual = getPathActual();
            }        
    }
    
    /*Método para obtener la línea actual*/
    
    
    public void setPosicion(int l, int c)
    {
        this.lblposicion.setText("Linea:"+(l+1) +" Columna:"+c);
    }
 
    //Este metodo creará una nuevo panel con su editor en blanco.
    public void nuevoArchivo()
    {

            JPanel panel = new JPanel();
            panel.setLayout(new java.awt.BorderLayout());
            JTextArea editor = new JTextArea(30,60);                               
            JScrollPane sp = new JScrollPane(editor);                                                                                 
            panel.add(sp);    
            contenedorPaneles.add("Nuevo-"+contadorNuevos, panel);                        
            agregarArbolGrafico("Nuevo-"+contadorNuevos);
            contadorNuevos++;            

    }
    
    
    public void nuevoArchivoConData(String nombre, String data)
    {

            JPanel panel = new JPanel();
            panel.setLayout(new java.awt.BorderLayout());
            JTextArea editor = new JTextArea(30,60);              
            tablaEditores.put(nombre, editor);                        
            
            //editor.setCodeFoldingEnabled(true);
            JScrollPane sp = new JScrollPane(editor);                                                                                    
            editor.setText(data);                            
            panel.add(sp);    
            contenedorPaneles.add(nombre, panel);                        
            agregarArbolGrafico(nombre);
            //contadorNuevos++;            

    }    
    
    public void agregarArbolGrafico(String nombre)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
        if(raizActual.equals(getPathActual()))
        {
            root.add(new DefaultMutableTreeNode(nombre));    
            //direcciones.put(nombre,getPathActual());
        }
        else
        {                            
           for(int contador = 0 ; contador<root.getChildCount(); contador ++)
           {
               if(root.getChildAt(contador).toString().equals(raizActual))
               {
                   DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) root.getChildAt(contador); 
                   nodo.add(new DefaultMutableTreeNode(nombre));
                   //direcciones.put(nombre,direcciones.get(raizActual));
               }
           }
        }
        model.reload(root);            
        archivos.put(nombre, "archivo");        

    }
    
    public void nuevaCarpeta()
    {
        String path = "";
        String nombreCarpeta ="";
        JFileChooser file=new JFileChooser(PathActual()+"\\Proyectos");
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
            StringTokenizer token = new StringTokenizer(eleccion.getPath(),"\\");
            String nombre = "";
            while(token.hasMoreTokens())
            {
                nombre = token.nextToken();
            }
            nombreCarpeta = nombre;  
            direcciones.put(nombreCarpeta,path);
        }        
        
        if(!nombreCarpeta.equals(getPathActual()))
        {        
            //String nombreCarpeta  = JOptionPane.showInputDialog("Nombre de la nueva carpeta");
            DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
            root.add(new DefaultMutableTreeNode(nombreCarpeta));
            model.reload(root);             
            archivos.put(nombreCarpeta, "carpeta");
        }
    }
    
    
    public String getPathActual(){
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) 
         {
           e.printStackTrace();
         }
         return path+"\\Proyectos";
    }      
    
    public void guardarArchivoNuevo() throws FileNotFoundException
    {        
        String tipo = ".coline";       
        /*
        String[] options = {".gcc", ".3d","cancelar"};
        int x = -1;
        
        while(x==-1)
        {
            x=JOptionPane.showOptionDialog(null, "Seleccion el tipo de archivo a guardar.",
                "Haga click en el botón",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);            
        }
        if(x==2){return;}
        tipo = options[x];

        
        if(tipo.equals("1")){tipo=".gcc";}
        if(tipo.equals("2")){tipo=".3d";}        
        */
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado); 
        /*File chooser*/
        JFileChooser chooser;
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("C:\\Users\\erick\\Desktop"));
        String choosertitle = null;
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);        
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        { 
          directorio = chooser.getSelectedFile().toString();
        }
        else 
        {
          return;
        }
        
        /*Ahora pedimos el nombre*/        
        String texto = "";
        String nombre = "";
        while(nombre.trim().equals(""))
        {
            nombre = JOptionPane.showInputDialog("Nombre con el que se guardará el nuevo archivo.");
        }
        nombre += tipo;
        
        if(directorio==null){directorio= pathProyectos+"\\"+nombre;}
        else{directorio= directorio+"\\"+nombre;}
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            JScrollPane scroll = (JScrollPane)temporal.getComponent(0);
            JViewport view = scroll.getViewport();
            JTextArea editor = (JTextArea) view.getComponent(0);//(RSyntaxTextArea)scroll.getComponent(0);            
            texto = editor.getText();
            //System.out.println(textoBuscado);
            writer.print(texto);
        }        
        direcciones.put(nombre,directorio);
        ActualizarNombres(seleccionado,nombre);
        
    }
    
    public void guardarArchivoNuevoSinGrafo(boolean compilar) 
    {
        int opcion = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios?");
        if(opcion ==1)
        {
            return;
        }
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        while(nombre.trim().equals(""))
        {
            nombre = JOptionPane.showInputDialog("Nombre con el que se guardará el nuevo archivo.");
        }
        if(!compilar){quitarNodo(seleccionado);}
        File archivo=new File(pathProyectos+"\\"+nombre+".gcc");
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            JScrollPane scroll = (JScrollPane)temporal.getComponent(0);
            JViewport view = scroll.getViewport();
            JTextArea editor = (JTextArea) view.getComponent(0);//(RSyntaxTextArea)scroll.getComponent(0);            
            texto = editor.getText();            
            writer.print(texto);
        } catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }                       
    }    
    
    
    public void save() throws FileNotFoundException
    {        
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);  
        if(directorio!=null)
        {
            guardarArchivo();   
        }        
        else
        {
            guardarArchivoNuevo();
        }        
    }    
    
    public void guardarArchivo() throws FileNotFoundException
    {
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        nombre = seleccionado;
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            JScrollPane scroll = (JScrollPane)temporal.getComponent(0);
            JViewport view = scroll.getViewport();
            JTextArea editor = (JTextArea) view.getComponent(0);//(RSyntaxTextArea)scroll.getComponent(0);            
            texto = editor.getText();
            //System.out.println(textoBuscado);
            writer.print(texto);
            writer.close();
        } 
        
        ActualizarNombres(seleccionado,nombre);        
    }  
    
    public void guardarArchivoSinGrafo(boolean compilar) 
    {
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        nombre = seleccionado;
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            JScrollPane scroll = (JScrollPane)temporal.getComponent(0);
            JViewport view = scroll.getViewport();
            JTextArea editor = (JTextArea) view.getComponent(0);//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(textoBuscado);
            writer.print(texto);
            writer.close();
        } catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(!compilar){quitarNodo(seleccionado);}
        
        //ActualizarNombres(seleccionado,nombre+".d++");
        
    }    
    
    
    
    
    
    public void quitarNodo(String actual)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
        qNodo(root, actual);
        model.reload(root);  
    }
    
    public void qNodo(DefaultMutableTreeNode root, String actual)
    {                                          
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {               
               root.remove(contador);               
               break;
           }
           else
           {
               qNodo((DefaultMutableTreeNode) root.getChildAt(contador), actual);
           }
       }                              
    }
    
    
    public void ActualizarNombres(String actual, String nuevo)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
                           
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {
               root.remove(contador);
               root.insert(new DefaultMutableTreeNode(nuevo), contador);               
               break;
           }
       }        
        model.reload(root);            
        archivos.put(nuevo, archivos.get(actual)); 
        String direccion  = direcciones.get(actual);
        if(direccion==null){direccion = pathProyectos+"\\"+nuevo;}
        direcciones.put(nuevo, direccion);        
        contenedorPaneles.setTitleAt(contenedorPaneles.getSelectedIndex(), nuevo);        
    }
    
    
    public void cerrarActual() throws FileNotFoundException
    {        
        String actual = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String[] partes = actual.split("\\.");
        if(partes.length==2)
        {
            guardarArchivoSinGrafo(false);
        }
        else
        {
            guardarArchivoNuevoSinGrafo(false);
        }
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
                           
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {               
               root.remove(contador);
               break;
           }
       }        
        model.reload(root);            
        archivos.remove(actual);
        direcciones.remove(actual);
        contenedorPaneles.remove(contenedorPaneles.getSelectedIndex());
    }


 
    
      
    /*
    
    Este método lanza la ejecución del algoritmo seleccionado aplicando al fichero seleccionado.
    */
    
    public void buscarSolucion() 
    {
        int algoritmoSelected = this.algoritmoSeleccionado.getSelectedIndex(); /*{Generación y prueba, Métodos de escalada, Búsqueda del primero mejor,Algoritmo A*}*/  
        /*Limpiar consola de salida*/
        textAreaConsola.setText("");
	DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	Date date = new Date();        
        fechaHora = dateFormat.format(date);              
        /*Guardar cambios en el fichero.*/
        if(contenedorPaneles.getTabRunCount()==0)
        {
            JOptionPane.showMessageDialog(this, "Debe abrir un archivo.");
            return;
        }
        String actual = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex()); 
        /*Verificamos si el archivo ya existe o no.*/
        if(actual.contains("."))
        {
            guardarArchivoSinGrafo(true);
        }
        else
        {
            guardarArchivoNuevoSinGrafo(true);
        }   
        /*Fin Guardar*------------*/
        
        String nombreArchivo = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String pathArchivo = direcciones.get(nombreArchivo);    
        Algoritmo algoritmo= null;
        /*
        Aquí comienza la ejecución de la soulución.
        */               
        try 
        {
            int matriz[][]; // Matriz inicial
            matriz = obtenerMatriz(pathArchivo); // Llenamos la matriz desde el fichero.
            Tablero tab = new Tablero(matriz); // Creamos el tablero inicial
            
            switch(algoritmoSelected)
            {
                case 0:/*Generacion y prueba*/
                    algoritmo =  new GeneracionYPrueba(tab);
                    break;
                case 1:/*Método de escalada*/
                    algoritmo = new DeEscaladaMaximaPendiente(tab);
                    break;
                case 2:/*Enfriamiento simulado*/
                    algoritmo = new EnfriamientoSimulado(tab);
                    break;
                case 3:/*Algoritmo A* */
                    algoritmo = new AlgoritmoA(tab);
                    break;
            }
            
        } catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            this.imprimirConsola("Error, el archivo no ha sido encontrado. "+ ex.getMessage());
        } 
        /**/
        if(algoritmo!=null)
        {
            algoritmo.Run(); // Ejecutamos el algoritmo para solucionar el tablero.
        }
    }
    
    public boolean esCuadrada(int mat[][])
    {
        for (int[] mat1 : mat) {
            if (mat1.length != mat.length) {
                return false;
            }
        }
        return true;
    }
    
    
    public void abrirAST()
    {
        
    }
    
    
    public void Imprimir(String m)
    {        
        this.textAreaConsola.setText(textAreaConsola.getText() + m);
    }    
    
    public void ImprimirLn(String m)
    {        
        this.textAreaConsola.setText(textAreaConsola.getText() + "\n" + m);
    } 
       
    // @param entero modo : 1= remplazar todo, 0= remplazar siguiente                       
    public void Imprimir(Object cadena)
    {
        System.out.println(cadena);
    }
    
    public void imprimirConsola(Object cadena)
    {        
        this.textAreaConsola.setText( this.textAreaConsola.getText() + "\n" + cadena.toString());
    }
    
    public void limpiarConsola()
    {
        this.textAreaConsola.setText("");
    }
    
    
    public String PathActual(){                
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) 
         {
           e.printStackTrace();
         }
         //return path+"\\Proyectos";
         return path;
    } 
    
        public double factorial(double num)
    {
        if(num==0){return 1;}
        else{return num*factorial(num-1);}
    }
    
    
    public double seno(double x, int ajuste)
    {
        double contador=0;
        if( ajuste>= 1 && ajuste<=10)
        {
            Imprimir("El ajuste debe estar entre 1 y 10");
            return -1;
        }
        double valor=0;
        ajuste = ajuste*100;
        while(contador<=ajuste)
        {
            valor = valor + (Math.pow(-1,contador)/(factorial(2*contador+1)))*Math.pow(x, 2*contador);
        }
        return valor;
    }
    
    
   public Color colorFuente(String color)
   {
       color = quitarComillas(color).toLowerCase();       
       Color retorno = Color.WHITE ;
       System.out.println("Buscando color: \t "+color);
       
       if(color.contains("#"))
       {
            //Mensaje("Buscando color: \t "+color,"");           
            //Color colorFodo = new Color(int r, int g, int b, int a);
            //this.scroll.setBackground(colorFondo);
            int r,g,b,a;
            String hr,hg,hb,ha;
            String entrada= color;
            hr = entrada.substring(1,3);
            hg = entrada.substring(3,5);
            hb = entrada.substring(5,7);

            r = hexToDec(hr);
            g = hexToDec(hg);
            b = hexToDec(hb);
            a=0;
            if(r==300 || g ==300 || b==300)
            {
                //filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),"Semantico", hijoD.getValue() + " Valor rgb no valido."});
                String mensaje = color + "Valor rgb no válido.";                           
            }
            else
            {
                //panel.setBackground(new Color(r,g,b));
                retorno = new Color(r,g,b);            
            }        
       }
       else
       {              
            switch(color)
            {
                case "blue":
                    retorno = Color.blue;
                    break;
                case "black":
                    retorno = Color.BLACK;
                    break;
                case "gray":
                    retorno = Color.GRAY;
                    break;
                case "cyan":
                    retorno = Color.CYAN;
                    break;
                case "dark_gray":
                    retorno = Color.DARK_GRAY;
                    break;   
                case "green":
                    retorno = Color.GREEN;
                    break;
                case "light_gray":
                    retorno = Color.LIGHT_GRAY;
                    break;
                case "magenta":
                    retorno = Color.MAGENTA;
                    break;
                case "orange":
                    retorno = Color.ORANGE;
                    break;
                case "pink":
                    retorno = Color.PINK;
                    break;
                case "red":
                    retorno = Color.RED;
                    break;
                case "white":
                    retorno = Color.WHITE;
                    break;
                case "yellow":
                    retorno = Color.YELLOW;
                    break;  
                default:
                    //filasErrores.addRow(new String[]{"CHTML",String.valueOf(raiz.getLinea()),String.valueOf(raiz.getColumna()),"Semantico","Nombre de color no válido."});
                    //Errores(String tipo, int linea, int columna, String valor)
                    String mensaje = color + "Nombre de color no válido.";
                    //listaErrores.add(new ErrorC(ErrorC.TipoError.SEMANTICO,mensaje, 0,0));   
                    break;
            }   
       }
        return retorno;
   }    
    public String quitarComillas(String cadena)
    {
        if(cadena!=null)
        {
            if(!cadena.equals(""))
            {
                String inicio = cadena.substring(0, 1);
                if(inicio.equals("\""))
                {
                    return cadena.substring(1, cadena.length()-1);
                }
                return cadena.trim();            
            }
            return cadena.trim();
        }
        return cadena.trim();
    }    

   private static int hexToDec(String hex) {  
       Integer outputDecimal = 0;
        try
        { 
            outputDecimal = Integer.parseInt(hex, 16);
            System.out.print(outputDecimal+"\t D:\t" + hex);
            return outputDecimal;
        }

        catch(NumberFormatException ne)
        {
            return 300;
        }            
    }
   

    
    
    /*
    * @params ast es una arrayList de instrucciones
    */
    

 
    public void prueba()
    {
        String valor = "99.00";
        double decimal = Double.parseDouble(valor);
        int entero = Integer.parseInt(valor);
    }

   

   public void iniciarDepuracion()
   {
       //Obtenemos break points              
   }

   public void iniciarEjecucion()
   {
        String path = "/home/erick/Escritorio/1S2020/IAYIS/Practica/PuzzleIA/ficheros/puzzle1.txt";         
        Tablero tablero1;
        try 
        {
            tablero1 = new Tablero(obtenerMatriz(path));
            GeneracionYPrueba met1 = new GeneracionYPrueba(tablero1);
            met1.Run();            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }        
   }
   
    public  int[][] obtenerMatriz(String path) throws FileNotFoundException
    {   
        int data[][] = null ;
        File archivo= new File(path);    
        Scanner sc = new Scanner(archivo); 
        /*Obtenemos cada una de las lineas*/
        LinkedList<String> lineas = new LinkedList<String>();
        while (sc.hasNextLine())
        {
            lineas.add(sc.nextLine());            
        }                
        /*Verificamos que la matriz sea cuadrada*/        
        int numeroColumnas, numeroFilas = lineas.size();
        /*reservamos espacio para la nueva matriz*/
        data = new int[lineas.size()][lineas.size()];
        /*Obtenemos los datos de cada fila que está en la columna*/
        int y = 0;
        StringTokenizer celdas = null;
        for(int i = 0; i< lineas.size(); i++)
        {
            String lineaActual = lineas.get(i);            
            y =0 ; 
            celdas =  new StringTokenizer (lineaActual,",");
            while(celdas.hasMoreTokens())
            {               
               if(y<numeroFilas)
               {
                   data[i][y] = Integer.parseInt(celdas.nextToken());
                   y++;
               }       
               else
               {                  
                  this.imprimirConsola("Error---> La matriz no es cuadrada");
                  break;
               }
            }            
        }
        return data;
    }   
    
    public int getCostoMaximo()
    {
        return (int) this.costoMaximo.getValue();
    }
    
    public int getPresicion()
    {
        return (int) this.Presición.getValue();
    }
    
    public boolean mostrarRuta()
    {
        return this.mejorRuta.isSelected();
    }
          
    public boolean buscarDeNuevo(int val)    
    {
        int input = JOptionPane.showConfirmDialog(null, "No se han encontrado soluciones con "+ this.getCostoMaximo() + ". ¿Desea volver a buscar?. Mejor puntaje "+val);
        return input == 0;        
    }
    
    public boolean buscarDeNuevo()    
    {
        int input = JOptionPane.showConfirmDialog(null, "No se han encontrado soluciones con "+ this.getCostoMaximo() + ". ¿Desea volver a buscar?.");
        return input == 0;        
    }    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner Presición;
    private javax.swing.JMenuItem abrirCarpeta;
    private javax.swing.JComboBox<String> algoritmoSeleccionado;
    private javax.swing.JTree arbolDirectorio;
    private javax.swing.JButton botonEjecutar;
    private javax.swing.JTabbedPane contenedorPaneles;
    private javax.swing.JSpinner costoMaximo;
    private javax.swing.JCheckBox estadosRepetidos;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelReporte;
    private javax.swing.JLabel lblposicion;
    private javax.swing.JCheckBox mejorRuta;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEjecucion;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JPanel panelDirectorio;
    private javax.swing.JPanel panelEdicion;
    private javax.swing.JPanel panelEditor;
    private javax.swing.JPanel panelReporte;
    private javax.swing.JTextArea reporteCompilacion;
    private javax.swing.JTable tablaErrores;
    private javax.swing.JTable tabladeSimbolos;
    private javax.swing.JTextArea textAreaConsola;
    // End of variables declaration//GEN-END:variables

    public void setModelTablaSimbolos(DefaultTableModel m)
    {
        this.tabladeSimbolos.setModel(m);
    }
    
    
    public boolean verificarEstadosRepetidos()
    {
        return this.estadosRepetidos.isSelected();
    }
    
}
